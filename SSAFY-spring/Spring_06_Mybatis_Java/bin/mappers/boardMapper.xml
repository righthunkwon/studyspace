<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper.xml -->
<!-- mapper.xml에는 Dao 인터페이스에서 작성한 명세를 구체적으로 구현한다(구현 클래스에 해당). -->

<!-- mapper의 namespace에는 Dao 인터페이스의 경로를 작성한다. -->
<mapper namespace="com.ssafy.board.model.dao.BoardDao">

	<!-- DML tag -->
	<!-- select, insert, delete, update -->
	<!-- 각 DML SQL문의 id에는 Dao 인터페이스에서 작성한 메소드명을 작성한다. -->

	<!-- typeAliases -->
	<!-- 
			mybatis-config.xml의 typeAliases에서 
			com.ssafy.board.model.dto.Board를 Board로 정의하여
			mapper.xml에서 풀 패키지명 대신에 Board로서 패키지명 작성을 편리하게 할 수 있다.
	-->

	<!-- resultType -->
	<!-- 반환타입으로 클래스 자체를 가져와 참조 -->
	
	<!-- resultMap -->
	<!-- 반환타입으로 개발자가 xml내에서 임의로 정의한 형식으로 참조 -->
	
	<!-- parameterType -->
	<!-- 메소드의 파라미터의 타입을 지정해주는 속성 -->
	
	<!-- resultMap -->
	<resultMap type="Board" id="boardMap">
		<!-- Board 클래스에 정의된 변수명과 DB에 정의된 컬럼명이 같으므로 생략 가능 -->
		<result column="id" property="id"/>
		<result column="writer" property="writer"/>
		<result column="title" property="title"/>
		<result column="content" property="content"/>
		<!-- Board 클래스에 정의된 변수명과 DB에 정의된 컬럼명이 다르므로 반드시 기술 -->
		<result column="view_cnt" property="viewCnt"/>
		<result column="reg_date" property="regDate"/>
	</resultMap>

	<!-- (1) 전체글 조회 -->
	<!-- SQL의 alias를 이용하여 Java와 DB의 변수명과 컬럼명을 일치시킨다. -->
	<select id="selectAll" resultType="Board">
		SELECT id, content, writer, title, view_cnt as viewCnt, date_format(reg_date, '%Y-%M-%d') as regDate 
		FROM board;
	</select>

	<!-- (2) 상세글 조회 -->
	<!-- resultMap을 활용하여 Java와 DB의 변수명과 컬럼명을 일치시킨다. -->
	<select id="selectOne" resultMap="boardMap" parameterType="int">
		SELECT *
		FROM board
		WHERE id = #{id};
	</select> 

	<!-- (3) 게시글 등록 -->
	<insert id="insertBoard" parameterType="Board">
		INSERT INTO board (title, writer, content)
		VALUES (#{title}, #{writer}, #{content})
	</insert>
	
	<!-- (4) 게시글 삭제 -->
	<delete id="deleteBoard" parameterType="int">
		DELETE FROM board
		WHERE id = #{id}
	</delete>
	
	<!-- (5) 조회수 증가 -->
	<update id="updateViewCnt" parameterType="int">
		UPDATE board
		SET view_cnt = view_cnt+1
		WHERE id = #{id}
	</update>
	
	<!-- (6) 게시글 수정 -->
	<!-- 현재 컬럼은 등록 날짜만 관리를 하고 있으므로 -->
	<!-- 글의 등록일과 수정일을 따로 관리하고 싶다면 추가적으로 컬럼을 등록하여야 한다(DB 모델링을 잘하자!) -->
	<update id="updateBoard" parameterType="board">
		UPDATE board
		SET title = #{title}, content = #{content}, reg_date = now()
		WHERE id = #{id}
	</update>

</mapper>