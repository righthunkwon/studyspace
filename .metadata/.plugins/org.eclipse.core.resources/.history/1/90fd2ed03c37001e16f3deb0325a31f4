package array04;

import java.util.Scanner;

public class P_1954 {
	// 오른쪽 아래 왼쪽 위쪽(달팽이 순회)
	static int[] dr = new int[] { 0, 1, 0, -1 };
	static int[] dc = new int[] { 1, 0, -1, 0 };

	static int r = 0; // 현재 행 위치
	static int c = 0; // 현재 열 위치
	static int dir = 0; // 방향(0오른쪽, 1아래, 2왼쪽, 3위쪽)

	// 이동
	static void move(int dir) {
		r += dr[dir];
		c += dc[dir];
	}

	// 방향 전환
	static void changeDir() {
		if (dir == 0) { // 오른쪽 → 아래쪽
			dir = 1;
		} else if (dir == 1) { // 아래쪽 → 왼쪽
			dir = 2;
		} else if (dir == 2) { // 왼쪽 → 위쪽
			dir = 3;
		} else if (dir == 3) { // 위쪽 → 오른쪽
			dir = 0;
		}
	}

	// 배열 출력
	static void printArr(int[][] arr, int n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(arr[i][j]);
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		// test case
		int tc = sc.nextInt();
		for (int t = 1; t <= tc; t++) {
			// test case마다 열과 행 초기화
			r = 0;
			c = 0;

			int n = sc.nextInt();
			int[][] arr = new int[n][n];

			// 달팽이 숫자 출력
			int i = 0; // 초기식
			int cnt = n * n; // 조건식(배열 전체 크기: n*n)
			int val = 1; // 달팽이 숫자			
			while (i < cnt) {
				arr[r][c] = val;
				int nr = r + dr[dir];
				int nc = c + dc[dir];
				if (!(arr[nr][nc] != 0 && nr >= 0 && nr < n && nc >= 0 && nc < n)) {
					changeDir();
				}
				move(dir); // r, c 값 증가 (다음 배열로 증가)
				val++; // 달팽이 숫자 증가
				i++; // 반복 횟주 증가
			}
			System.out.printf("#%d", t);
			printArr(arr, n);
		}
	}

}
