package array04;

import java.util.Scanner;

public class Array04_05_달팽이순회 {
	// 규칙 발견
	// 가로에서 세로로 이동할 때 한 칸씩 줄어든다. 증가, 감소 순이다
	// 세로에서 가로로 이동할 때 칸은 유지된다. 감소, 증가 순이다.
	// 델타 방향을 이용해서 풀어볼 수도 있다.
	// 전부 0으로 초기화된 배열에서 값을 넣는 방식으로 구현 가능하다.

	public static final int MAX_SIZE = 100;
	// 동 남 서 북
	static int[] dx = new int[] { 0, 1, 0, -1 };
	static int[] dy = new int[] { 1, 0, -1, 0 };

	static int[][] arr = new int[MAX_SIZE][MAX_SIZE];

	public static int moveDir = 1;

	public static int x = 0;
	public static int y = 0;

	public static boolean inRange(int x, int y, int n, int m) {
		return (0 <= x && x < n && 0 <= y && y < m && arr[x][y] == 0);
	}

	public static void changeDir() {
		if (moveDir == 0) {
			moveDir = 3;
		} else if (moveDir == 1) {
			moveDir = 0;
		} else if (moveDir == 2) {
			moveDir = 1;
		} else if (moveDir == 3) {
			moveDir = 2;
		}
	}

	public static void move(int moveDir) {
		x += dx[moveDir];
		y += dy[moveDir];
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int m = sc.nextInt();

		int count = n * m;

		int i = 1;
		while (i <= count) {
			arr[x][y] = i;

			int nextX = x + dx[moveDir];
			int nextY = y + dy[moveDir];

			if (!inRange(nextX, nextY, n, m)) {
				changeDir();
			}

			move(moveDir);
			i++;

		}

		for (int j = 0; j < n; j++) {
			for (int k = 0; k < m; k++) {
				System.out.printf("%d ", arr[j][k]);
			}
			System.out.println();
		}

	}
}
